# Archive

```elixir
Mix.install(
  [
    {:archive, path: "/Users/andres/Documents/cortex/stanford-tax/archive"},
  ]
)
```

## Writing

```elixir
data = File.read!("/Users/andres/Documents/penang.zip")
```

```elixir
{:ok, reader} = Archive.Stream.new(data)
{:ok, writer} =
  Archive.Stream.new("/Users/andres/Desktop/testing123.tar.gz")
nil
```

```elixir
Stream.map(reader, fn entry ->
  if String.starts_with?(entry.path,"assets/") do
    Archive.Entry.read_data!(entry, reader)
  end
end)
|> Stream.filter(& &1)
|> Enum.into(writer)
nil
```

```elixir
Archive.Nif.archive_error_string(writer.writer.ref)
```

```elixir
alias Archive.{Entry, Writer, Reader}
w = Archive.Writer.new!(format: :zip)
```

```elixir
dir = "/Users/andres/Downloads/arxiv/"

entries =
  File.ls!(dir)
  |> Enum.map(fn relpath ->
    stat = File.stat!(dir <> "/" <> relpath)
    %Entry{path: relpath, stat: stat}
  end)

archive_path = "testfile.zip"

archive =
  Writer.write_streaming(w, archive_path, entries)
  |> Enum.to_list()
```

```elixir
# r = Archive.Reader.new!()
# |> Archive.Reader.read!("testfile.zip")
```

```elixir
# r |> IO.inspect(custom_options: [breadth: 12, depth: 10])
# nil
```

## From Memory

```elixir
data = File.read!("/Users/andres/Documents/penang.zip")
```

```elixir
r = Archive.Reader.new!()
```

```elixir
r = Archive.Reader.read!(r, data, as: :list)
```

```elixir
IO.inspect(r, custom_options: [depth: 4, breadth: 10])
nil
```

```elixir
r.entries
```

```elixir
r
```

```elixir
r =
  Archive.Reader.read!(r, data,
    with: fn entry, archive ->
      if entry.stat.size > 100 do
        Archive.Entry.read_data!(entry, archive)
      else
        entry
      end
      end, as: :list
  )
```

```elixir
IO.inspect(r, custom_options: [depth: 3, breadth: 2])
nil
```

Get loaded entries only

```elixir
r.entries |> Enum.filter(& &1.data)
```

## From File

```elixir
tarpath = "/Users/andres/Downloads/redis.tar"
compressedpath = "/Users/andres/Downloads/geoip.tar.gz"
#compressedpath = "/Users/andres/Downloads/arxiv.tar.gz"
zippath = "/Users/andres/Documents/penang.zip"
```

```elixir
a = Archive.Reader.new!(formats: [except: [:zip, :raw]])
for file <- [tarpath, compressedpath, zippath] do
  Archive.Reader.read!(a, file) |> IO.inspect(custom_options: [breadth: 1, depth: 1])
end
nil
```

```elixir
a.entries
```
